apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: org-mongo-statefulset
spec:
  replicas: 1
  selector:
    matchLabels:
      app: org-mongo
  template:
    metadata:
      labels:
        app: org-mongo
    spec:
      containers:
        - name: org-mongo
          image: mongo:latest
          command:
            - "mongod"
            - "--bind_ip_all"
            - "--auth"
          ports:
            - containerPort: 27017
          envFrom:
            - secretRef:
                name: org-mongo-secret
          lifecycle:
            postStart:
              exec:
                command:
                  - "sh"
                  - "-c"
                  - >
                    sleep 5;
                    mongosh --eval "
                      const adminDb = db.getSiblingDB('admin');
                      const userExists = adminDb.runCommand({ usersInfo: { user: '$MONGO_INITDB_ROOT_USERNAME', db: 'admin' } }).users.length > 0;
                      if (!userExists) {
                        console.log('User does not exist, creating...');
                        adminDb.createUser({
                          user: '$MONGO_INITDB_ROOT_USERNAME',
                          pwd: '$MONGO_INITDB_ROOT_PASSWORD',
                          roles: [ { role: 'root', db: 'admin' } ]
                        });
                        console.log('User created successfully.');
                      } else {
                        console.log('User already exists, skipping creation.');
                      }
                    "
          volumeMounts:
            - name: org-mongo-persistent-storage
              mountPath: /data/db
  volumeClaimTemplates:
    - metadata:
        name: org-mongo-persistent-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
