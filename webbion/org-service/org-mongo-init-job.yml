apiVersion: batch/v1
kind: Job
metadata:
  name: org-mongo-init-job
spec:
  template:
    spec:
      # This ensures the Job pod can be cleanly removed after it's done.
      restartPolicy: OnFailure
      containers:
        - name: mongo-user-creator
          image: mongo:latest
          env:
            # Load the username from the secret into an environment variable
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: org-mongo-secret
                  key: MONGO_INITDB_ROOT_USERNAME
            # Load the password from the secret into an environment variable
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: org-mongo-secret
                  key: MONGO_INITDB_ROOT_PASSWORD
          command:
            - "sh"
            - "-c"
            - >
              mongosh --host org-mongo-clusterip-service -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --eval '
                const res = db.getSiblingDB("admin").runCommand({ usersInfo: { user: "$MONGO_INITDB_ROOT_USERNAME", db: "admin" } });
                if (res.users.length === 0) {
                  console.log("User does not exist, creating...");
                  db.getSiblingDB("admin").createUser({
                    user: "$MONGO_INITDB_ROOT_USERNAME",
                    pwd: "$MONGO_INITDB_ROOT_PASSWORD",
                    roles: [ { role: "root", db: "admin" } ]
                  });
                  console.log("User created successfully.");
                } else {
                  console.log("User already exists, skipping creation.");
                }
              '
